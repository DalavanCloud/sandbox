
[Listing 1]
package com.huettermann;

import java.lang.System;

/**
 * Hello world! with Lambdas, Java SE 8
 */
public class App
{
    public static void main(String[] args) {
        Runnable r = () -> System.out.println("Hello World!");
        Thread t = new Thread(r);
        t.start();

    }
}

[Listing 2]
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.huettermann</groupId>
    <artifactId>cat</artifactId>
    <version>${myVersion}</version>
    <name>devops</name>
    <url>http://huettermann.net/devops/</url>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

[Listing 3]
#!/bin/sh
rm -rf /home/michael/talk/transfer
mkdir /home/michael/talk/transfer
cp devops/target/*.jar /home/michael/talk/transfer

[Listing 4]
#!/bin/sh
version1=$(sed -n 's/.*version>/\0/p' pom.xml | head -1)
version2=$(echo $version1 | sed 's/<version>//g')
version=$(echo $version2 | sed 's/<\/version>//g')
rm version.properties
echo $version
echo "version=$version" >> version.properties

[Listing 5]
def matcher = manager.getLogMatcher(".*Checking out Revision (.*)\$")
if(matcher?.matches()) {
    manager.addShortText(matcher.group(1).substring(0,8))
}

[Listing 6]
#!/bin/sh
rm *.jar
cp /home/michael/talk/transfer/*.jar .

[Listing 7]
**/*.jar=>com/huettermann/cat/${version}

[Listing 8]
package VersionFetcher;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;


/**
 * @goal release
 * @phase process-sources
 */
public class VersionFetcher extends AbstractMojo {

    /**
     * @parameter expression = "${project}"
     * @readonly
     */
    private MavenProject project;

    public void execute() throws MojoExecutionException {
    String version = project.getVersion();
    String release = version;
    if (version.indexOf("-SNAPSHOT") > -1) {
        release = version.substring(0, version.indexOf("-SNAPSHOT"));
        getLog().info("SNAPSHOT found: " + release);
    }
    project.getProperties().setProperty("newVersion", release);
  }
}

[Listing 9]
com.huettermann:versionfetcher:1.0.0:release versions:set
-DgenerateBackupPoms=false

[Listing 10]
#!/bin/sh
version1=$(sed -n 's/.*version>/\0/p' devops/pom.xml | head -1)
version2=$(echo $version1 | sed 's///g')
version=$(echo $version2 | sed 's/<\/version>//g')
hash=$GIT_COMMIT
var=$(echo $hash | cut -b 1-6)
revisioncount=`git log --oneline | wc -l`
release=$version-$var.r$revisioncount.b$BUILD_NUMBER
echo $release

[Listing 11]
cp devops/target/cat-$version.jar devops/target/cat-$release.jar

[Listing 12]
curl -u michaelhuettermann:${bintray_key} -X DELETE
https://api.bintray.com/packages/michaelhuettermann/meow/cat/versions/$release

[Listing 13]
curl -u michaelhuettermann:${bintray_key} -H "Content-Type: application/json" -X
POST https://api.bintray.com/packages/michaelhuettermann/meow/cat/versions
--data "{ \"name\": \"$release\", \"desc\": \"desc\" }"

[Listing 14]
curl -T "$WORKSPACE/devops/target/cat-$release.jar" -u
michaelhuettermann:${bintray_key} -H "X-Bintray-Package:cat" -H
"X-Bintray-Version:$release"
https://api.bintray.com/content/michaelhuettermann/meow/

[Listing 15]
curl -u michaelhuettermann:${bintray_key} -H "Content-Type: application/json" -X
POST
https://api.bintray.com/content/michaelhuettermann/meow/cat/$release/publish
--data "{ \"discard\": \"false\" }"



#434 archetype mojo 



ssh-copy-id user@hostname.example.com
cat ~/.ssh/id_rsa.pub | ssh <user>@<hostname> 'cat >> .ssh/authorized_keys && echo "Key copied"'
update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_55/bin/java 100



$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4

git log origin..master




Plain Jenkins

-- JobConfigHistory Plugin
-- parametrized trigger plugin
-- groovy postbuild plugin
-- Artifactory
-- Sonar
-- build pipeline
-- greem ball
-- git client git server
-- chuck
-- build flow plugin
https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin



https://help.github.com/articles/set-up-git



http://dl.bintray.com/michaelhuettermann/meow/all-1.0.0-GA.war
http://localhost:8888/all-1.0.0-GA/
-------------------

docker logs $(docker -q -a -l)


JOB=$(sudo docker run -d tomcat7 /bin/sh -c "while true; do echo Hello world; sleep 10; done")
docker run $JOB

docker run -p 8080:8080 -d tomcat7


docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

docker run -i -t tomcat7 /bin/bash

# Commit your container to a new named image
$ sudo docker commit <container_id> <some_name>


dpkg -L tomcat7


Alternatively, run tomcat in the foreground with
tomcat/bin/catalina.sh run
and that should have the same affect, so your cmd would look like this:
CMD ["<path/to/tomcat>/bin/catalina.sh", "run"]

docker run -v /tmp:/root myImage
in order to mount /tmp from the host machine as /root within the image.
Source: http://docs.docker.io/en/latest/use/working_with_volumes/


 2326  docker ps
 2327  docker stop 10d5dee1616c 
 2328  docker images 
 2330  docker run -d -p 8888:8080 -v /home/michaelhuettermann/tmp/:/shareme tomcat7
 2331  docker ps
 2332  docker inspect $(docker ps -a -q) | grep -i Pid
 2333  sudo nsenter --target 602 --mount --uts --ipc --net --pid

 docker inspect $(docker ps -a -q) | grep -i Pid | head -1 | tr -cd '[:digit:]'
 sudo nsenter --target $PID --mount --uts --ipc --net --pid

 pid=$(docker inspect $(docker ps -a -q) | grep -i Pid | head -1 | tr -cd '[:digit:]')
 sudo nsenter --target $(docker inspect $(docker ps -a -q) | grep -i Pid | head -1 | tr -cd '[:digit:]') --mount --uts --ipc --net --pid
 
 2048  wget http://localhost:8888/all/
 2049  ls -la
 2050  vi index.html 
 2051  cp index.html index.html2
 2055  diff index.html index.html2 
 2060  diff=$(diff index.html index.html2)
 2062  echo $diff
 2068  expr length "$diff" 
 
 diff=$(diff index.html index.html2)
 length=$(expr length "$diff")
  
 if [ $length -eq 0 ]
  then echo "ok"
  else echo "fail"
 fi




sudo nsenter --target $(docker inspect $(docker ps -a -q) | grep -i Pid | head -1 | tr -cd '[:digit:]') --mount --uts --ipc --net --pid

docker exec -it 4513f99f7bdb bash

----------
Artifactory: 8081
Sonar: 9000  admin|admin
Jenkins: 8080

Artifactory: admin|password  (My)


